 // (C) 2009, Lubomir I. Ivanov
//
// NO WARRANTY IS GRANTED. THIS PLUG-IN IS PROVIDED ON AN "AS IS" BASIS, WITHOUT
// WARRANTY OF ANY KIND. NO LIABILITY IS GRANTED, INCLUDING, BUT NOT LIMITED TO,
// ANY DIRECT OR INDIRECT,  SPECIAL,  INCIDENTAL OR CONSEQUENTIAL DAMAGE ARISING
// OUT OF  THE  USE  OR INABILITY  TO  USE  THIS PLUG-IN,  COMPUTER FAILTURE  OF
// MALFUNCTION INCLUDED.  THE USE OF THE SOURCE CODE,  EITHER  PARTIALLY  OR  IN
// TOTAL, IS ONLY GRANTED,  IF USED IN THE SENSE OF THE AUTHOR'S INTENTION,  AND
// USED WITH ACKNOWLEDGEMENT OF THE AUTHOR. FURTHERMORE IS THIS PLUG-IN A  THIRD
// PARTY CONTRIBUTION,  EVEN IF INCLUDED IN REAPER(TM),  COCKOS INCORPORATED  OR
// ITS AFFILIATES HAVE NOTHING TO DO WITH IT.  LAST BUT NOT LEAST, BY USING THIS
// PLUG-IN YOU RELINQUISH YOUR CLAIM TO SUE IT'S AUTHOR, AS WELL AS THE CLAIM TO
// ENTRUST SOMEBODY ELSE WITH DOING SO.
// 
// Released under GPL:
// <http://www.gnu.org/licenses/>.
//
//******************************************************************************
// Includes optimized version of Linkwitz-Riley (LR2) filters
// by T. Lossius - ttblue project
//******************************************************************************

//==============================================================================
// init
//==============================================================================
desc: De-esser [Liteon]
//tags: filter dynamics processing repair
//author: Liteon

filename:0,GFX_De-Esser/bg1.png
filename:1,GFX_De-Esser/bg2.png
filename:2,GFX_De-Esser/led_red.png
filename:3,GFX_De-Esser/Target1.png
filename:4,GFX_De-Esser/Target2.png

slider1:1<0,1,1{Stereo,Mono}>-Processing
slider2:1<0,1,1{Bandpass,Hipass}>-Target Type
slider3:0<0,1,1{Off,On}>-Monitor
slider4:4000<1500,12000,1>-Frequency (Hz)
slider5:1.5<0.1,3.1,0.0005>-Bandwidth (Oct)
slider6:-25<-80,0,0.01>-Threshold (dB)
slider7:4<1,20,0.01>-Ratio
slider8:0<0,1,1{A: 3 és - R: 50 ms,B: 30 és - R: 100 ms,C: 100 és - R: 300 ms}>-Time Constants
slider9:0<-24,24,0.001>-Gain (-inf/+24dB)
slider10:0<0,1,1{Blue,Black}>-Background
in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init

//scope
histbuf=1000000;
histpos=0;

  
function doCenterText(ctrX, ctrY, val)(
  str = sprintf(#, "%.f", val);
  gfx_measurestr(str, str_w, str_h);
  gfx_x = ctrX - str_w/2;
  gfx_y = ctrY - str_h/2;
  gfx_drawstr(str);
);
n = 0;
sqrt2 = sqrt(2);
s2 = sqrt2/2;
cgain = 1;
cdenorm = 10^-30;
e10 = 10^-10;
g_meter = gr_meter = g_reset = 1;
gr_meter_decay = exp(1/(1*srate));


//==============================================================================
@slider
//==============================================================================
//------------------------------------------------------------------------------
// settings
//------------------------------------------------------------------------------
mono = slider1;
target = slider2; 
monitor = slider3;
fc = slider4;
bw  = slider5;
//comp
thr = pow(10, 2 * (slider6/80+1) - 2);
rat = (slider7-1)/19;
//original
//rat = (slider7-1)/19;
slider8 == 0 ? (
att = pow(10, -0.002 - 3.97772619*(0/100));
rel = pow(10, -3.11 - 1.8698*(21.20/100));
);
slider8 == 1 ? (
att = pow(10, -0.002 - 3.97772619*(9.71/100));
rel = pow(10, -3.11 - 1.8698*(37.19/100));
);
slider8 == 2 ? (
att = pow(10, -0.002 - 3.97772619*(20.97/100));
rel = pow(10, -3.11 - 1.8698*(62.61/100));
);
//outgain
slider9 == -24 ? (
outgain = 0;
) : (
outgain = 10^(slider9/20);
);
//------------------------------------------------------------------------------
// crossover type: 2 or 3 bands
// this is a bit confusing, but optimized for js !
//------------------------------------------------------------------------------
target == 0 ? (
fh = min((fc + fc*bw/2),20000);
//------------------------------
// high-band split - s1 (at fh)
//------------------------------
fpi = $pi*fh;
wc = 2*fpi;
wc2 = wc*wc;
wc22 = 2*wc2;
k = wc/tan(fpi/srate);
k2 = k*k;
k22 = 2*k2;
wck2 = 2*wc*k; 
tmpk = (k2+wc2+wck2);
tgt_b1_s1 = (-k22+wc22)/tmpk;
tgt_b2_s1 = (-wck2+k2+wc2)/tmpk;
//---------------
// low-pass (s1)
//---------------
tgt_a0_s1_lp = (wc2)/tmpk;
tgt_a1_s1_lp = (wc22)/tmpk;
tgt_a2_s1_lp = (wc2)/tmpk;
//----------------
// high-pass (s1)
//----------------
tgt_a0_s1_hp = (k2)/tmpk;
tgt_a1_s1_hp = (-k22)/tmpk;
tgt_a2_s1_hp = (k2)/tmpk;
//----------------
// prepare for s0
//----------------
fl = fc - fc*bw/4;
fpi = $pi*fl;
) : (
fpi = $pi*fc;
);
//---------------------------------------------
// low-band split - s0 (case: at 'fc' or 'fl')
// s0 is always processed (2 band split)
//---------------------------------------------
wc = 2*fpi;
wc2 = wc*wc;
wc22 = 2*wc2;
k = wc/tan(fpi/srate);
k2 = k*k;
k22 = 2*k2;
wck2 = 2*wc*k; 
tmpk = (k2+wc2+wck2);
tgt_b1_s0 = (-k22+wc22)/tmpk;
tgt_b2_s0 = (-wck2+k2+wc2)/tmpk;
//---------------
// low-pass (s0)
//---------------
tgt_a0_s0_lp = (wc2)/tmpk;
tgt_a1_s0_lp = (wc22)/tmpk;
tgt_a2_s0_lp = (wc2)/tmpk;
//----------------
// high-pass (s0)
//----------------
tgt_a0_s0_hp = (k2)/tmpk;
tgt_a1_s0_hp = (-k22)/tmpk;
tgt_a2_s0_hp = (k2)/tmpk;

//scope
size=4500;
histsize=size/1000*srate|0;

zoom_gain=10^(1/20)




@sample
//==============================================================================
//------------------------------------------------------------------------------
// mono
//------------------------------------------------------------------------------
mono == 1 ? (
//----------------------------------
// s0, b
//----------------------------------
b1_s0 += d_b1_s0;
b2_s0 += d_b2_s0;
//----------
// s0, lp 
//----------
a0_s0_lp += d_a0_s0_lp;
a1_s0_lp += d_a1_s0_lp;
a2_s0_lp += d_a2_s0_lp;
s0_lp_l_in = (spl0+spl1)/2;
s0_lp_l_output = a0_s0_lp*s0_lp_l_in + s0_lp_l_xm0;
s0_lp_l_xm0 = a1_s0_lp*s0_lp_l_in - b1_s0*s0_lp_l_output + s0_lp_l_xm1;
s0_lp_l_xm1 = a2_s0_lp*s0_lp_l_in - b2_s0*s0_lp_l_output;
//----------
// s0, hp 
//----------
a0_s0_hp += d_a0_s0_hp;
a1_s0_hp += d_a1_s0_hp;
a2_s0_hp += d_a2_s0_hp;
s0_hp_l_in = (spl0+spl1)/2;
s0_hp_l_output = a0_s0_hp*s0_hp_l_in + s0_hp_l_xm0;
s0_hp_l_xm0 = a1_s0_hp*s0_hp_l_in - b1_s0*s0_hp_l_output + s0_hp_l_xm1;
s0_hp_l_xm1 = a2_s0_hp*s0_hp_l_in - b2_s0*s0_hp_l_output;
s0_hp_l_output *= -1;
//----------------------------------
// s1, b
//----------------------------------
target == 0 ? (
b1_s1 += d_b1_s1;
b2_s1 += d_b2_s1;
//----------
// s1, lp 
//----------
a0_s1_lp += d_a0_s1_lp;
a1_s1_lp += d_a1_s1_lp;
a2_s1_lp += d_a2_s1_lp;
s1_lp_l_in = s0_hp_l_output;
s1_lp_l_output = a0_s1_lp*s1_lp_l_in + s1_lp_l_xm0;
s1_lp_l_xm0 = a1_s1_lp*s1_lp_l_in - b1_s1*s1_lp_l_output + s1_lp_l_xm1;
s1_lp_l_xm1 = a2_s1_lp*s1_lp_l_in - b2_s1*s1_lp_l_output;
//----------
// s1, hp 
//----------
a0_s1_hp += d_a0_s1_hp;
a1_s1_hp += d_a1_s1_hp;
a2_s1_hp += d_a2_s1_hp;
s1_hp_l_in = s0_hp_l_output;
s1_hp_l_output = a0_s1_hp*s1_hp_l_in + s1_hp_l_xm0;
s1_hp_l_xm0 = a1_s1_hp*s1_hp_l_in - b1_s1*s1_hp_l_output + s1_hp_l_xm1;
s1_hp_l_xm1 = a2_s1_hp*s1_hp_l_in - b2_s1*s1_hp_l_output;
s1_hp_l_output *= -1;
//--------------------------- 
// set process band (cband)
//---------------------------
cband_l = s1_lp_l_output;
) : (
cband_l = s0_hp_l_output;
);
//--------------------------- 
// compressor 
//---------------------------
dtl = abs(cband_l);
(dtl > envl) ? envl = envl + att*(dtl - envl) : envl = envl*(1 - rel);
(envl > thr) ? (cgainl = 1+(rat*((envl/thr)-1)); g_reset = 0;) : (cgainl = 1; g_reset = 1);
(envl < e10) ? envl = 0;
//--------------------------
// update gr meter
//--------------------------
g_reset == 0 ? g_meter = 1/cgainl : g_meter = 1;

//-----------------------
// monitor or sum bands
//-----------------------
monitor == 1 ? (
outl = cband_l*outgain/cgainl+cdenorm;
) : (
target == 0 ? (
sum_l = s0_lp_l_output+cband_l/cgainl+s1_hp_l_output;
) : (
sum_l = s0_lp_l_output+cband_l/cgainl;
);
outl = sum_l*outgain+cdenorm;
);

//check clip
(outl < -1 || outl > 1) ? clip = 1;

spl0 = spl1 = outl;




//------------------------------------------------------------------------------
// stereo
//------------------------------------------------------------------------------
) : (

//----------------------------------
// s0, b
//----------------------------------
b1_s0 += d_b1_s0;
b2_s0 += d_b2_s0;
//----------
// s0, lp 
//----------
a0_s0_lp += d_a0_s0_lp;
a1_s0_lp += d_a1_s0_lp;
a2_s0_lp += d_a2_s0_lp;
s0_lp_l_in = spl0;
s0_lp_l_output = a0_s0_lp*s0_lp_l_in + s0_lp_l_xm0;
s0_lp_l_xm0 = a1_s0_lp*s0_lp_l_in - b1_s0*s0_lp_l_output + s0_lp_l_xm1;
s0_lp_l_xm1 = a2_s0_lp*s0_lp_l_in - b2_s0*s0_lp_l_output;
s0_lp_r_in = spl1;
s0_lp_r_output = a0_s0_lp*s0_lp_r_in + s0_lp_r_xm0;
s0_lp_r_xm0 = a1_s0_lp*s0_lp_r_in - b1_s0*s0_lp_r_output + s0_lp_r_xm1;
s0_lp_r_xm1 = a2_s0_lp*s0_lp_r_in - b2_s0*s0_lp_r_output;
//----------
// s0, hp 
//----------
a0_s0_hp += d_a0_s0_hp;
a1_s0_hp += d_a1_s0_hp;
a2_s0_hp += d_a2_s0_hp;
s0_hp_l_in = spl0;
s0_hp_l_output = a0_s0_hp*s0_hp_l_in + s0_hp_l_xm0;
s0_hp_l_xm0 = a1_s0_hp*s0_hp_l_in - b1_s0*s0_hp_l_output + s0_hp_l_xm1;
s0_hp_l_xm1 = a2_s0_hp*s0_hp_l_in - b2_s0*s0_hp_l_output;
s0_hp_l_output *= -1;
s0_hp_r_in = spl1;
s0_hp_r_output = a0_s0_hp*s0_hp_r_in + s0_hp_r_xm0;
s0_hp_r_xm0 = a1_s0_hp*s0_hp_r_in - b1_s0*s0_hp_r_output + s0_hp_r_xm1;
s0_hp_r_xm1 = a2_s0_hp*s0_hp_r_in - b2_s0*s0_hp_r_output;
s0_hp_r_output *= -1;
//----------------------------------
// s1, b
//----------------------------------
target == 0 ? (
b1_s1 += d_b1_s1;
b2_s1 += d_b2_s1;
//----------
// s1, lp 
//----------
a0_s1_lp += d_a0_s1_lp;
a1_s1_lp += d_a1_s1_lp;
a2_s1_lp += d_a2_s1_lp;
s1_lp_l_in = s0_hp_l_output;
s1_lp_l_output = a0_s1_lp*s1_lp_l_in + s1_lp_l_xm0;
s1_lp_l_xm0 = a1_s1_lp*s1_lp_l_in - b1_s1*s1_lp_l_output + s1_lp_l_xm1;
s1_lp_l_xm1 = a2_s1_lp*s1_lp_l_in - b2_s1*s1_lp_l_output;
s1_lp_r_in = s0_hp_r_output;
s1_lp_r_output = a0_s1_lp*s1_lp_r_in + s1_lp_r_xm0;
s1_lp_r_xm0 = a1_s1_lp*s1_lp_r_in - b1_s1*s1_lp_r_output + s1_lp_r_xm1;
s1_lp_r_xm1 = a2_s1_lp*s1_lp_r_in - b2_s1*s1_lp_r_output;
//----------
// s1, hp 
//----------
a0_s1_hp += d_a0_s1_hp;
a1_s1_hp += d_a1_s1_hp;
a2_s1_hp += d_a2_s1_hp;
s1_hp_l_in = s0_hp_l_output;
s1_hp_l_output = a0_s1_hp*s1_hp_l_in + s1_hp_l_xm0;
s1_hp_l_xm0 = a1_s1_hp*s1_hp_l_in - b1_s1*s1_hp_l_output + s1_hp_l_xm1;
s1_hp_l_xm1 = a2_s1_hp*s1_hp_l_in - b2_s1*s1_hp_l_output;
s1_hp_l_output *= -1;
s1_hp_r_in = s0_hp_r_output;
s1_hp_r_output = a0_s1_hp*s1_hp_r_in + s1_hp_r_xm0;
s1_hp_r_xm0 = a1_s1_hp*s1_hp_r_in - b1_s1*s1_hp_r_output + s1_hp_r_xm1;
s1_hp_r_xm1 = a2_s1_hp*s1_hp_r_in - b2_s1*s1_hp_r_output;
s1_hp_r_output *= -1;
//--------------------------- 
// set process band (cband)
//---------------------------
cband_l = s1_lp_l_output;
cband_r = s1_lp_r_output;
) : (
cband_l = s0_hp_l_output;
cband_r = s0_hp_r_output;
);
//--------------------------- 
// compressor 
//---------------------------
dtl = abs(cband_l);
dtr = abs(cband_r);
dtr > dtl ? dtl = dtr;
(dtl > envl) ? envl = envl + att*(dtl - envl) : envl = envl*(1 - rel);
(envl > thr) ? (cgainl = 1+(rat*((envl/thr)-1)); g_reset = 0;) : (cgainl = 1; g_reset = 1);
(envl < e10) ? envl = 0;

dtr = abs(cband_r);
//--------------------------
// update gr meter
//--------------------------
g_reset == 0 ? (
(cgainl > cgainr) ? g_meter = 1/cgainl : g_meter = 1/cgainr;
) : (
g_meter = 1;
);

//-----------------------
// monitor or sum bands
//-----------------------
monitor == 1 ? (
outl = cband_l*outgain/cgainl+cdenorm;
outr = cband_r*outgain/cgainl+cdenorm;
) : (
target == 0 ? (
sum_l = s0_lp_l_output+cband_l/cgainl+s1_hp_l_output;
sum_r = s0_lp_r_output+cband_r/cgainl+s1_hp_r_output;
) : (
sum_l = s0_lp_l_output+cband_l/cgainl;
sum_r = s0_lp_r_output+cband_r/cgainl;
);
outl = sum_l*outgain+cdenorm;
outr = sum_r*outgain+cdenorm;
);

//check clip
(outl < -1 || outl > 1) ? clip = 1;
(outr < -1 || outr > 1) ? clip = 1;


spl0 = outl;
spl1 = outr;

);
//scope
histbuf[histpos]=spl0 * -zoom_gain;
histbuf[histpos+histsize]=spl1 * -zoom_gain;

histpos+=1;
histpos >= histsize ? histpos=0;



//-----------------------------------------
// meter decay
//-----------------------------------------
g_meter < gr_meter ? gr_meter=g_meter : gr_meter*=gr_meter_decay;





@block 
//-----------------------------------------
// update clip indicator
//-----------------------------------------
bps = srate/samplesblock;
n > bps ? (
clip = 0;
n = 0;
);
n += 1;
//==============================================================================
// interpolate *all* coefficients here
//==============================================================================
//------------------------------------------------------------------------------
// s0
//------------------------------------------------------------------------------
//-------------------
// s0 b
//-------------------
d_b1_s0 = (tgt_b1_s0-src_b1_s0)/samplesblock;
b1_s0 = src_b1_s0;
src_b1_s0 = tgt_b1_s0;
d_b2_s0 = (tgt_b2_s0-src_b2_s0)/samplesblock;
b2_s0 = src_b2_s0;
src_b2_s0 = tgt_b2_s0;
//-------------------
// s0 a lp
//-------------------
d_a0_s0_lp = (tgt_a0_s0_lp-src_a0_s0_lp)/samplesblock;
a0_s0_lp = src_a0_s0_lp;
src_a0_s0_lp = tgt_a0_s0_lp;
d_a1_s0_lp = (tgt_a1_s0_lp-src_a1_s0_lp)/samplesblock;
a1_s0_lp = src_a1_s0_lp;
src_a1_s0_lp = tgt_a1_s0_lp;
d_a2_s0_lp = (tgt_a2_s0_lp-src_a2_s0_lp)/samplesblock;
a2_s0_lp = src_a2_s0_lp;
src_a2_s0_lp = tgt_a2_s0_lp;
//-------------------
// s0 a hp
//-------------------
d_a0_s0_hp = (tgt_a0_s0_hp-src_a0_s0_hp)/samplesblock;
a0_s0_hp = src_a0_s0_hp;
src_a0_s0_hp = tgt_a0_s0_hp;
d_a1_s0_hp = (tgt_a1_s0_hp-src_a1_s0_hp)/samplesblock;
a1_s0_hp = src_a1_s0_hp;
src_a1_s0_hp = tgt_a1_s0_hp;
d_a2_s0_hp = (tgt_a2_s0_hp-src_a2_s0_hp)/samplesblock;
a2_s0_hp = src_a2_s0_hp;
src_a2_s0_hp = tgt_a2_s0_hp;
//------------------------------------------------------------------------------
// s1
//------------------------------------------------------------------------------
target == 0 ? (
//-------------------
// s1 b
//-------------------
d_b1_s1 = (tgt_b1_s1-src_b1_s1)/samplesblock;
b1_s1 = src_b1_s1;
src_b1_s1 = tgt_b1_s1;
d_b2_s1 = (tgt_b2_s1-src_b2_s1)/samplesblock;
b2_s1 = src_b2_s1;
src_b2_s1 = tgt_b2_s1;

//-------------------
// s1 a lp
//-------------------
d_a0_s1_lp = (tgt_a0_s1_lp-src_a0_s1_lp)/samplesblock;
a0_s1_lp = src_a0_s1_lp;
src_a0_s1_lp = tgt_a0_s1_lp;
d_a1_s1_lp = (tgt_a1_s1_lp-src_a1_s1_lp)/samplesblock;
a1_s1_lp = src_a1_s1_lp;
src_a1_s1_lp = tgt_a1_s1_lp;
d_a2_s1_lp = (tgt_a2_s1_lp-src_a2_s1_lp)/samplesblock;
a2_s1_lp = src_a2_s1_lp;
src_a2_s1_lp = tgt_a2_s1_lp;

//-------------------
// s1 a hp
//-------------------
d_a0_s1_hp = (tgt_a0_s1_hp-src_a0_s1_hp)/samplesblock;
a0_s1_hp = src_a0_s1_hp;
src_a0_s1_hp = tgt_a0_s1_hp;
d_a1_s1_hp = (tgt_a1_s1_hp-src_a1_s1_hp)/samplesblock;
a1_s1_hp = src_a1_s1_hp;
src_a1_s1_hp = tgt_a1_s1_hp;
d_a2_s1_hp = (tgt_a2_s1_hp-src_a2_s1_hp)/samplesblock;
a2_s1_hp = src_a2_s1_hp;
src_a2_s1_hp = tgt_a2_s1_hp;

);

@gfx 630 350

gfx_setfont(1,"Arial",14,'b');



//---------------------------------
//code Time constants
//---------------------------------
mouse_cap > 0 ? (
  mouseon == 0 ? (
  need_redraw=1;
  mouse_y> 285 && mouse_y < 308 ? (
    mousedown=8;
    val=slider8;
    mouse_x > 495 && mouse_x < 520 ? (val=0);
    mouse_x > 522 && mouse_x < 548 ? (val=1);
    mouse_x > 550 && mouse_x < 580 ? (val=2);
  );
      );
    )
    :
    (
      mousedown = 0;
         need_redraw=0;
    );
    
          
    
      mousedown == 8 ? (slider8 = val);  
      
      
      //---------------------------------
      //Target Type
      //---------------------------------
      
      mouse_cap > 0 ? (
        mouseon == 0 ? (
        need_redraw=1;
        mouse_y> 205 && mouse_y < 226 ? (
          mousedown=2;
          val=slider2;
          mouse_x > 70 && mouse_x < 96 ? (val=1);
          mouse_x > 105 && mouse_x < 137 ? (val=0);

        );
            );
          )
          :
          (
            mousedown = 0;
               need_redraw=0;
          );
          
                
          
            mousedown == 2 ? (slider2 = val);  
      
  
                 
           

  //---------------------------------
  //code mouse
  //---------------------------------

mouse_cap > 0 ? (
  mouseon == 0 ? (
    mouseclick = 0;
    (mouse_x>=518&&mouse_x<=551&&mouse_y>=255&&mouse_y<=264) ? (mouseon=1;mouseclick=1;);
    (mouse_x>=530&&mouse_x<=549&&mouse_y>=210&&mouse_y<=227) ? (mouseon=3;mouseclick=3;);
    (mouse_x>=46&&mouse_x<=80&&mouse_y>=330&&mouse_y<=342) ? (mouseon=10;mouseclick=10;);
    (mouse_x>=39&&mouse_x<=589&&mouse_y>=28&&mouse_y<=120) ? (mouseon=6;mouseclick=6;val=2;);
    
    
    (mouse_x>=40&&mouse_x<=98&&mouse_y>=238&&mouse_y<=288) ? (mouseon=4;mouseclick=4;val=100;);
    (mouse_x>=110&&mouse_x<=168&&mouse_y>=238&&mouse_y<=288) ? (mouseon=5;mouseclick=5;val=0.1;);
    (mouse_x>=184&&mouse_x<=255&&mouse_y>=218&&mouse_y<=288) ? (mouseon=9;mouseclick=9;val=0.6;);
    (mouse_x>=272&&mouse_x<=370&&mouse_y>=198&&mouse_y<=288) ? (mouseon=6;mouseclick=6;val=0.6;);
    (mouse_x>=389&&mouse_x<=460&&mouse_y>=218&&mouse_y<=288) ? (mouseon=7;mouseclick=7;val=0.1;);

    mouse_cap == 5 ? val*=10.;
    mouse_cap == 17 ? val*=0.3;

  );
//Frequency
      mouseon == 4 ? (
        mouse_y < saveY ? slider4 = max(1500,slider4-val);
          mouse_y > saveY ? slider4 = min(12000,slider4+val);
      mouse_cap == 2 ? slider4 = 4000;

  );
  
  //BrandWidth(Q)
        mouseon == 5 ? (
          mouse_y < saveY ? slider5 = max(0.1,slider5-val);
            mouse_y > saveY ? slider5 = min(3.1,slider5+val);
        mouse_cap == 2 ? slider5 = 0;
  
    );
    
    //gain
          mouseon == 9 ? (
            mouse_y < saveY ? slider9 = max(-24,slider9-val);
              mouse_y > saveY ? slider9 = min(24,slider9+val);
          mouse_cap == 2 ? slider9 = 0;
    
      );
      
      //Threhold
            mouseon == 6 ? (
              mouse_y < saveY ? slider6 = max(-80,slider6-val);
                mouse_y > saveY ? slider6 = min(0,slider6+val);
            mouse_cap == 2 ? slider6 = -25;
      
        );
    
    //Ratio
          mouseon == 7 ? (
            mouse_y < saveY ? slider7 = max(1,slider7-val);
              mouse_y > saveY ? slider7 = min(20,slider7+val);
          mouse_cap == 2 ? slider7 = 1;
    
      );
      
   //Processing
      mouseon == 1 ? (
        done == 0 ? (
         slider1 == 1 ? (
           slider1 = 0): (slider1 = 1;);
        );
        done = 1;
      );
      

      
      //Monitor
         mouseon == 3 ? (
           done == 0 ? (
            slider3 == 1 ? (
              slider3 = 0): (slider3 = 1;);
           );
           done = 1;
         );
         
         //Background
            mouseon == 10 ? (
              done == 0 ? (
               slider10 == 1 ? (
                 slider10 = 0): (slider10 = 1;);
              );
              done = 1;
            );
            
            
       
//---------------------------------
//code Slider
//---------------------------------


mono = slider1;
target = slider2; 
monitor = slider3;
fc = slider4;
bw  = slider5;
//comp
thr = pow(10, 2 * (slider6/80+1) - 2);
rat = (slider7-1)/19;
slider8 == 0 ? (
att = pow(10, -0.002 - 3.97772619*(0/100));
rel = pow(10, -3.11 - 1.8698*(21.20/100));
);
slider8 == 1 ? (
att = pow(10, -0.002 - 3.97772619*(9.71/100));
rel = pow(10, -3.11 - 1.8698*(37.19/100));
);
slider8 == 2 ? (
att = pow(10, -0.002 - 3.97772619*(20.97/100));
rel = pow(10, -3.11 - 1.8698*(62.61/100));
);
//outgain
slider9 == -24 ? (
outgain = 0;
) : (
outgain = 10^(slider9/20);
);
//------------------------------------------------------------------------------
// crossover type: 2 or 3 bands
// this is a bit confusing, but optimized for js !
//------------------------------------------------------------------------------
target == 0 ? (
fh = min((fc + fc*bw/2),20000);
//------------------------------
// high-band split - s1 (at fh)
//------------------------------
fpi = $pi*fh;
wc = 2*fpi;
wc2 = wc*wc;
wc22 = 2*wc2;
k = wc/tan(fpi/srate);
k2 = k*k;
k22 = 2*k2;
wck2 = 2*wc*k; 
tmpk = (k2+wc2+wck2);
tgt_b1_s1 = (-k22+wc22)/tmpk;
tgt_b2_s1 = (-wck2+k2+wc2)/tmpk;
//---------------
// low-pass (s1)
//---------------
tgt_a0_s1_lp = (wc2)/tmpk;
tgt_a1_s1_lp = (wc22)/tmpk;
tgt_a2_s1_lp = (wc2)/tmpk;
//----------------
// high-pass (s1)
//----------------
tgt_a0_s1_hp = (k2)/tmpk;
tgt_a1_s1_hp = (-k22)/tmpk;
tgt_a2_s1_hp = (k2)/tmpk;
//----------------
// prepare for s0
//----------------
fl = fc - fc*bw/4;
fpi = $pi*fl;
) : (
fpi = $pi*fc;
);
//---------------------------------------------
// low-band split - s0 (case: at 'fc' or 'fl')
// s0 is always processed (2 band split)
//---------------------------------------------
wc = 2*fpi;
wc2 = wc*wc;
wc22 = 2*wc2;
k = wc/tan(fpi/srate);
k2 = k*k;
k22 = 2*k2;
wck2 = 2*wc*k; 
tmpk = (k2+wc2+wck2);
tgt_b1_s0 = (-k22+wc22)/tmpk;
tgt_b2_s0 = (-wck2+k2+wc2)/tmpk;
//---------------
// low-pass (s0)
//---------------
tgt_a0_s0_lp = (wc2)/tmpk;
tgt_a1_s0_lp = (wc22)/tmpk;
tgt_a2_s0_lp = (wc2)/tmpk;
//----------------
// high-pass (s0)
//----------------
tgt_a0_s0_hp = (k2)/tmpk;
tgt_a1_s0_hp = (-k22)/tmpk;
tgt_a2_s0_hp = (k2)/tmpk;



//---------------------------------
//Finaliza Comando Mouse
//---------------------------------
  saveX=mouse_x;
  saveY=mouse_y;
): (done=0;mouseon=0;);


//---------------------------------
//Fundo Preto
//---------------------------------
gfx_r=0;gfx_g=0;gfx_b=0. ;
gfx_a=1;
gfx_x=-1; gfx_y=122;
gfx_rectto(590,0);


          
              
       

//---------------------------------
//scope
//---------------------------------
offs=histpos;
gscale=550/histsize;
gbuf=histbuf;
gscale2=60;


gfx_r=0;gfx_g=0.7;gfx_b=0.8;
gfx_a=0.5;

ga=0;
loop(histsize,
gv=gbuf[offs];
offs+=1;
offs>=histsize?offs=0;
gx=ga*gscale+39;
gy=80 - gv*gscale2;
ga ? gfx_lineto(gx,gy,0) : ( gfx_x=gx; gfx_y=gy; );
ga+=1;
);

gbuf+=histsize;


//---------------------------------
//Tampao Scope
//---------------------------------
gfx_r=0;gfx_g=0;gfx_b=0;
gfx_a=1;
gfx_x=-1; gfx_y=122;
gfx_rectto(630,400);

gbuf+=histsize;
//---------------------------------
//gfx Threshold
//---------------------------------
  gfx_r=0.5; gfx_g=1; gfx_b=0.6; gfx_a=1;
  gfx_x=39; gfx_y=40-slider6/2;
  gfx_lineto(590,40-slider6/2,1);
  
  gfx_x=39; gfx_y=120+slider6/2;
  gfx_lineto(590,120+slider6/2,1);


//---------------------------------
// Gain Reduction
//---------------------------------

gfx_setfont(1,"Arial ",14,'b');  

//---------------------------------
// set gr meter  
//---------------------------------
gr_meter *= exp(1/30);
gr_meter > 1 ? gr_meter=1;
gfx_r=0;
gfx_g=0.9;
gfx_b=0.9;
gfx_a=0.9;
gfx_w=589;
meter_bot=20;
meter_h=min(165,221);
xscale=gfx_w*19.71/meter_bot;
//xscale=1035*5.6/meter_bot;
gfx_y=141;
gfx_x=gfx_w + log10(gr_meter)*xscale;
gfx_rectto(gfx_w,164);


         //---------------------------------
         //Tampao GR
         //---------------------------------
         gfx_r=0;gfx_g=0;gfx_b=0;
         gfx_a=1;
         gfx_x=-1; gfx_y=122;
         gfx_rectto(65,400);

//---------------------------------
//background 
//---------------------------------
gfx_a = 1;
gfx_x = 1; gfx_y = -1;
gfx_blit(slider10,1,0);

         

//---------------------------------
// clip indicator
//---------------------------------
gfx_x = 16; gfx_y = 141;
//led red clip
gfx_a =0.8;
gfx_blit(2,1,0,-24);
clip == 1 ? (
gfx_a = 1 ;
) : (
gfx_a =0.1;
);
//led red clip
gfx_x = 40 ; gfx_y = 141;
gfx_blit(2,1,0,24);

//---------------------------------
// draw scale
//---------------------------------*
gfx_r=1;
gfx_b=1;
gfx_g=1;
gfx_a=0.6;
g = s2;
while(
gfx_x=gfx_w + log10(g)*xscale;
gfx_x >= 0 ? (
gfx_y=140;
gfx_lineto(gfx_x,meter_h-1,0);
gfx_y=0+meter_h-gfx_texth-5;
gfx_x+=4;
gfx_drawnumber(log10(g)*20,0);
gfx_drawchar($'d');
gfx_drawchar($'B');
);
g*=s2;
gfx_x >=0;
);


//---------------------------------
//Line Vertical 0db
//---------------------------------

gfx_x=587;
gfx_y=-25+meter_h;
gfx_lineto(gfx_w-2,meter_h,0);
//---------------------------------
//Line Horizontal
//---------------------------------
gfx_x=65;
gfx_y=meter_h;
gfx_lineto(gfx_w-2,meter_h,0);

gfx_x=65;
gfx_y=304-meter_h;
gfx_lineto(gfx_w-2,304-meter_h,0);

//---------------------------------
//Name Processing
//---------------------------------

gfx_a = 0.7 ;
gfx_r=1;gfx_g=1;gfx_b=0.9;
gfx_x = 503; gfx_y = 234;
 gfx_drawstr("Processing:");
 
 gfx_r=0;gfx_g=1;gfx_b=0.2;
 slider1 == 1 ?
      (  
  gfx_x=520;
  gfx_y=253;
  gfx_drawstr("Mono");
  
  );
  
  gfx_r=0;gfx_g=1;gfx_b=0.9;
  slider1 == 0 ?
       (  
   gfx_x=519;
   gfx_y=253;
   gfx_drawstr("Stereo");
   
   );
  
 

  
  //---------------------------------
  //Name Time constants
  //---------------------------------
  
  gfx_a = 0.7 ;
  gfx_r=1;gfx_g=1;gfx_b=0.9;
  gfx_x = 490; gfx_y = 277;
   gfx_drawstr("Time Constants:");
   
   
   gfx_r=0;gfx_g=1;gfx_b=0.9;
 
    gfx_x=505;
    gfx_y=293;
    gfx_drawstr("A");
    
    gfx_x=535;
    gfx_drawstr("B");
    gfx_x=565;
    gfx_drawstr("C");
    
    gfx_r=0;gfx_g=1;gfx_b=0.2;
    
    slider8 == 0 ?
         ( 
     gfx_x=505;
     gfx_y=293;
     gfx_drawstr("A");
     ):
     slider8 == 1 ?
          ( 
     gfx_x=535;
     gfx_y=293;
     gfx_drawstr("B");
     );
     
     slider8 == 2 ?
          ( 
     gfx_x=565;
     gfx_y=293;
     gfx_drawstr("C");
  
    );
    

   //---------------------------------
   //Name Time constants
   //---------------------------------
   
   gfx_a = 0.7 ;
   gfx_r=1;gfx_g=1;gfx_b=0.9;
   gfx_x = 514; gfx_y = 194;
    gfx_drawstr("Monitor:");
    
    
    gfx_r=0;gfx_g=1;gfx_b=0.2;
    slider3== 1 ?
         (  
     gfx_x=528;
     gfx_y=212;
     gfx_drawstr("ON");
     
     );
     
     gfx_r=0;gfx_g=1;gfx_b=0.9;
     slider3 == 0 ?
          (  
      gfx_x=528;
      gfx_y=212;
      gfx_drawstr("OFF");
      
      );
      
      
      //---------------------------------
      //Name Time constants
      //---------------------------------
      
      gfx_a = 0.7 ;
      gfx_r=1;gfx_g=1;gfx_b=0.9;
      gfx_x = 20; gfx_y = 330;
       gfx_drawstr("Skin:");
       
       
       gfx_r=0;gfx_g=1;gfx_b=0.9;
       slider10== 1 ?
            (  
        gfx_x=50;
        gfx_y=330;
        gfx_drawstr("Night");
        
        );
        
        gfx_r=0;gfx_g=1;gfx_b=0.2;
        slider10 == 0 ?
             (  
         gfx_x=50;
         gfx_y=330;
         gfx_drawstr("Day");
         
         );
   
   //---------------------------------
   //Name TargetType
   //---------------------------------
   
   gfx_a = 0.7 ;
   gfx_r=1;gfx_g=1;gfx_b=0.9;
   gfx_x = 72; gfx_y = 192;
    gfx_drawstr("Target type:");
    
    //---------------------------------
    //Target Type Gui
    //---------------------------------
    
    gfx_x = 49 ; gfx_y = 207;
    gfx_blit(3,1,0,-27);
    
    gfx_x = 103 ;
    gfx_blit(3,1,0,26);
    
    slider2== 1 ?
         ( 
    gfx_x = 49 ; gfx_y = 207;
    gfx_blit(4,1,0,-27);
    );
    
    slider2== 0 ?
         ( 
    gfx_x = 103 ; gfx_y = 207;
    gfx_blit(4,1,0,26);
    );
//---------------------------------
//Name GR
//---------------------------------

gfx_a = 0.7 ;
gfx_r=1;gfx_g=1;gfx_b=0.9;
gfx_x = 283; gfx_y = 125;
 gfx_drawstr("Gain Reduction");
//---------------------------------
//Name Display WaveForm
//---------------------------------
gfx_setfont(1,"Arial Black",19,'b');
gfx_a = 0.7 ;
gfx_r=1;gfx_g=1;gfx_b=0.9;
gfx_x = 277; gfx_y = 14;
 gfx_drawstr("Display Wave");       
//---------------------------------
//Name Clip Peak
//---------------------------------
gfx_setfont(1,"Arial",13,'b');
gfx_a = 0.7 ;
gfx_r=1;gfx_g=1;gfx_b=0.9;
gfx_x = 21; gfx_y = 146;
 gfx_drawstr("Clip");
 
 //---------------------------------
 //Name Freq
 //---------------------------------
 
 gfx_setfont(1,"Arial",14,'b');
 gfx_a = 0.7 ;
 gfx_r=0;gfx_g=1;gfx_b=0.9;
 gfx_x = 57; gfx_y = 256;
  gfx_drawstr("Freq."); 
  
          mouseon==4 ?
          ( 
  gfx_r=0;gfx_g=1;gfx_b=0;
  gfx_x = 57; gfx_y = 256;
   gfx_drawstr("Freq."); 
   );
  
  
  //---------------------------------
  //Name Brand
  //---------------------------------

  gfx_a = 0.7 ;
  gfx_r=0;gfx_g=1;gfx_b=0.9;
  gfx_x = 133; gfx_y = 256;
   gfx_drawstr("BW");
   
   mouseon==5 ?
           ( 
   gfx_r=0;gfx_g=1;gfx_b=0;
   gfx_x = 133; gfx_y = 256;
    gfx_drawstr("BW");
   );
   
   //---------------------------------
   //Name Gain
   //---------------------------------
   
   gfx_setfont(1,"Arial",15,'b');
   gfx_a = 0.7 ;
   gfx_r=0;gfx_g=1;gfx_b=0.9;
   gfx_x = 209; gfx_y = 248;
    gfx_drawstr("Gain"); 
    
    mouseon==9 ?
            ( 
    gfx_r=0;gfx_g=1;gfx_b=0;
    gfx_x = 209; gfx_y = 248;
     gfx_drawstr("Gain");
    );
    //---------------------------------
    //Name Gain
    //---------------------------------
    
    gfx_a = 0.7 ;
    gfx_r=0;gfx_g=1;gfx_b=0.9;
    gfx_x = 413; gfx_y = 248;
     gfx_drawstr("Ratio"); 
     
     mouseon==7 ?
             ( 
     gfx_r=0;gfx_g=1;gfx_b=0;
     gfx_x = 413; gfx_y = 248;
      gfx_drawstr("Ratio"); 
    );
    
    //---------------------------------
    //Name Gain
    //---------------------------------
    
    gfx_setfont(1,"Arial",16,'b');
    gfx_a = 0.7 ;
    gfx_r=0;gfx_g=1;gfx_b=0.9;
    gfx_x = 291; gfx_y = 238;
     gfx_drawstr("Threshold"); 
     
     mouseon==6 ?
             ( 
     gfx_r=0;gfx_g=1;gfx_b=0.;
     gfx_x = 291; gfx_y = 238;
      gfx_drawstr("Threshold"); 
     );


    //---------------------------------
    //Number Display
    //---------------------------------
    
    gfx_setfont(1,"Arial",11,'b');
    gfx_a = 0.7 ;
    gfx_r=0;gfx_g=1;gfx_b=0.9;
    gfx_x = 597; gfx_y = 33;
     gfx_drawstr("0");

     gfx_x = 594; gfx_y = 54;
      gfx_drawstr("-40");
  
     
     gfx_x = 594; gfx_y = 74;
      gfx_drawstr("-80");
      
      
      gfx_x = 594; gfx_y = 93;
       gfx_drawstr("-40");
      
      gfx_x = 597; gfx_y = 113;
       gfx_drawstr("0");
//---------------------------------
//Name FX
//---------------------------------
gfx_setfont(1,"Arial Black",40,'b');
gfx_a = 0.7 ;
gfx_r=1;gfx_g=1;gfx_b=0.9;
gfx_x = 250; gfx_y = 311;
         gfx_drawstr("De-Esser");
         
         //---------------------------------
         //Name skin
         //---------------------------------
         gfx_setfont(1,"Arial",15,'b');
         gfx_a = 0.7 ;
         gfx_r=1;gfx_g=1;gfx_b=0.9;
         gfx_x = 550; gfx_y = 332;
          gfx_drawstr("Gil Fernandes");
          
          
          //---------------------------------
          //Number Frequency Display
          //---------------------------------
          gfx_setfont(1,"Arial",12,'b');
               mouseon==4 ?
                 (  
               doCenterText(65,298, slider4);
               gfx_drawchar($'H');
               gfx_drawchar($'z');
          );
          
          //---------------------------------
          //Number Q Display
          //---------------------------------
          
          mouseon==5 ?
          (  
            gfx_x = 124; gfx_y = 292;               
        
          gfx_drawnumber(slider5,2);
           gfx_drawchar($'O');
           gfx_drawchar($'c');
           gfx_drawchar($'t');
                   
            );   
            
            //---------------------------------
            //Number Gain Display
            //---------------------------------
                 mouseon==9 ?
                   (  
                 doCenterText(214,298, slider9);
                 gfx_drawchar($'d');
                 gfx_drawchar($'b');
            );
            
            //---------------------------------
            //Number Threhold Display
            //---------------------------------
                 mouseon==6 ?
                   (  
                 doCenterText(316,298, slider6);
                 gfx_drawchar($'d');
                 gfx_drawchar($'b');
            );
            
          
          //---------------------------------
          //Number Ratio Display
          //---------------------------------
               mouseon==7 ?
                 (  
               doCenterText(423,298, slider7);
               gfx_drawchar($':');
               gfx_drawchar($'1');
          );
          
          
          
          
          //---------------------------------
          //Paines
          //---------------------------------
           gfx_a = 1;
           gfx_r=0;gfx_g=0.7;gfx_b=0.8;
           gfx_roundrect(37,188,440,126,2);
           
           gfx_a = 1;
           gfx_r=0;gfx_g=0.7;gfx_b=0.8;
           gfx_roundrect(482,188,105,126,2);
           
     
          
          gfx_a = 0.4 ;
          //---------------------------------
          //Arc Hold
          //---------------------------------
           gfx_r=0;
           gfx_g=0.9;
           gfx_b=0.2;
          
           //Threshold
           gfx_arc(322,245,46,9-80/72*4.8, 9);
          //Ratio
          gfx_arc(426,255,34,9.8+20/18*4.8, 10);
          //Gain
          gfx_arc(220,255,34,10+24/9.4+2.6, 10);
          //FREQ
          gfx_arc(70,263,26,9.4+12000/19000*9.1, 10);
          //FREQ
          gfx_arc(140,263,26,10+3.1/5.5*9.1, 10);
          
          
          gfx_a = 1 ;
          //---------------------------------
          //Arc rotate
          //---------------------------------
           gfx_r=0;
           gfx_g=1;
           gfx_b=1;
           


           //Threshold
           gfx_arc(322,245,43,9+slider6/72*4.8, 9);
           gfx_arc(322,245,44,9+slider6/72*4.8, 9);
           gfx_arc(322,245,45,9+slider6/72*4.8, 9);
           gfx_arc(322,245,46,9+slider6/72*4.8, 9);
           gfx_arc(322,245,47,9+slider6/72*4.8, 9);
           gfx_arc(322,245,48,9+slider6/72*4.8, 9);
           gfx_arc(322,245,43,9+slider6/72*4.8, 9);
           gfx_arc(322,245,44,9+slider6/72*4.8, 9);
           gfx_arc(322,245,45,9+slider6/72*4.8, 9);
           gfx_arc(322,245,46,9+slider6/72*4.8, 9);
           gfx_arc(322,245,47,9+slider6/72*4.8, 9);
           gfx_arc(322,245,48,9+slider6/72*4.8, 9);
           

              
            //Ratio
           gfx_arc(426,255,32,9.8+slider7/18*4.8, 10);
           gfx_arc(426,255,33,9.8+slider7/18*4.8, 10);
           gfx_arc(426,255,35,9.8+slider7/18*4.8, 10);
           gfx_arc(426,255,34,9.8+slider7/18*4.8, 10);
           gfx_arc(426,255,36,9.8+slider7/18*4.8, 10);
           gfx_arc(426,255,32,9.8+slider7/18*4.8, 10);
           gfx_arc(426,255,33,9.8+slider7/18*4.8, 10);
           gfx_arc(426,255,35,9.8+slider7/18*4.8, 10);
           gfx_arc(426,255,34,9.8+slider7/18*4.8, 10);
           gfx_arc(426,255,36,9.8+slider7/18*4.8, 10);

           
          //Gain
          gfx_arc(220,255,32,10+slider9/9.4+2.6, 10);
          gfx_arc(220,255,33,10+slider9/9.4+2.6, 10);
          gfx_arc(220,255,35,10+slider9/9.4+2.6, 10);
          gfx_arc(220,255,34,10+slider9/9.4+2.6, 10);
          gfx_arc(220,255,36,10+slider9/9.4+2.6, 10);
          gfx_arc(220,255,32,10+slider9/9.4+2.6, 10);
          gfx_arc(220,255,33,10+slider9/9.4+2.6, 10);
          gfx_arc(220,255,35,10+slider9/9.4+2.6, 10);
          gfx_arc(220,255,34,10+slider9/9.4+2.6, 10);
          gfx_arc(220,255,36,10+slider9/9.4+2.6, 10);
          
          
          //Freq
          gfx_arc(70,263,24,9.4+slider4/19000*9.1, 10);
          gfx_arc(70,263,25,9.4+slider4/19000*9.1, 10);
          gfx_arc(70,263,26,9.4+slider4/19000*9.1, 10);
          gfx_arc(70,263,27,9.4+slider4/19000*9.1, 10);
          gfx_arc(70,263,28,9.4+slider4/19000*9.1, 10);
          gfx_arc(70,263,24,9.4+slider4/19000*9.1, 10);
          gfx_arc(70,263,25,9.4+slider4/19000*9.1, 10);
          gfx_arc(70,263,26,9.4+slider4/19000*9.1, 10);
          gfx_arc(70,263,27,9.4+slider4/19000*9.1, 10);
          gfx_arc(70,263,28,9.4+slider4/19000*9.1, 10);
          
        
          //Q(BrandWidth)
          gfx_arc(140,263,24,10+slider5/5.5*9.1, 10);
          gfx_arc(140,263,25,10+slider5/5.5*9.1, 10);
          gfx_arc(140,263,26,10+slider5/5.5*9.1, 10);
          gfx_arc(140,263,27,10+slider5/5.5*9.1, 10);
          gfx_arc(140,263,28,10+slider5/5.5*9.1, 10);
          gfx_arc(140,263,24,10+slider5/5.5*9.1, 10);
          gfx_arc(140,263,25,10+slider5/5.5*9.1, 10);
          gfx_arc(140,263,26,10+slider5/5.5*9.1, 10);
          gfx_arc(140,263,27,10+slider5/5.5*9.1, 10);
          gfx_arc(140,263,28,10+slider5/5.5*9.1, 10);
          
          
          
          //---------------------------------
          //gfx bordas
          //---------------------------------
          gfx_a = 0.8;
          gfx_r=0;gfx_g=0.7;gfx_b=0.8;
          gfx_roundrect(1,2,630,345,2);
          
          //gfx borda scope
          gfx_a = 1;
          gfx_r=0;gfx_g=0.7;gfx_b=0.8;
          gfx_roundrect(38,39,552,82,2);
          
          
          
          
          
          
          
          
          
          
             //info!!! gfx_rect(middleX-120,middleY-100,250,130);
             
             gfx_setfont(1,"Arial Black",14,'a');
             help.x=520;            
             help.y=3;
          
           gfx_r = 1; gfx_g = 0.9; gfx_b = 0; gfx_a = 0.8;
           gfx_x = help.x; gfx_y = help.y;
           gfx_drawstr("Click Here!!!");
          
           mouse_cap > 0 ? (
             mouseon == 0 ? (
               mouseclick = 0;
               (mouse_x>= help.x && mouse_x<= help.x +70 && 
                mouse_y>= help.y && mouse_y<= help.y +10) ?
             displayHelp = 1;
           );
           );
           
  
           
           gfx_setfont(1,"Arial",14,'a');
            displayHelp > 0.01 ? (
             gfx_a = displayHelp;
            gfx_mode = 0;
            middleX = 600/2; middleY = 300/2;
            gfx_r = 0.; gfx_g = 0.1; gfx_b = 0.1;
            gfx_x = 0; gfx_y = 0;
          gfx_rect(middleX-120,middleY-100,260,260);
            gfx_r = 1; gfx_g = 1; gfx_b = 0;
            gfx_x = middleX-135; gfx_y = middleY-94;
          
            gfx_drawstr("                                       Author Plugin:
                 (C) 2008-2009, Lubomir I. Ivanov (Liteon)
                                 Released under GPL:
                       <http://www.gnu.org/licenses/>.
                              
                        CodeGFX/Skin: Gil Fernandes
                               Youtube.com/GFbeats 
                               
                                            Tips:
                                       
                         Ctrl+MouseClick Hard Adjust
                         Alt+MouseClick Slow Adjust
                                   
                                  Time Constants:
                                 A: 3Ã©s - R:50ms
                                 B: 30Ã©s - R:100ms
                                 C: 100Ã©s - R:300ms
                                
          
                                
                                   "
                             );
                               displayHelp *= 0.5;
                             );
