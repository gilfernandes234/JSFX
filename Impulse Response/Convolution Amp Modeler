// This effect Copyright (C) 2004 and later Cockos Incorporated
// License: LGPL - http://www.gnu.org/licenses/lgpl.html
//desc: Convolution Amp/Cab Modeler
//tags: guitar amplifier convolution FFT

desc:Convolution Amp Modeler 



filename:0,bgamp.png
filename:1,k1.png

slider1:/IR_Library:none:Modelo:
slider2:-30<-100,10,1>-Pre-amp 
slider3:1<0,1,1{No,Yes}>-UpSample
slider4:1<0,1,1{Mono,Stereo}>-Channel Mode
slider5:0,-Filter Size
slider6:0,-FFT Size



//Eq
slider7:0<-31,31,1>-Low
slider8:200<1,2000,1>-Hidden parameter
slider9:0<-31,31,1>-Mid 
slider10:2000<2000,10000,1>-Hidden parameter
slider11:0<-31,31,1>-High 
slider12:0<-31,20,1>-Hidden parameter
slider13:0<-24,31,1>-Output

//PDC

slider27:0,-PDC delay

in_pin:R
in_pin:L
out_pin:R
out_pin:L

//Amp
@init


fftsize=-1;
need_refft=1;
lslider1=-1;
convsrc=128*1024;
impbuf=256*1024;


pdc_delay=slider27;
pdc_bot_ch=0;
pdc_top_ch=2;

//Eq
@init
gfx_clear=-1;
mouseclick = 0;
cDenorm = 10^-30;
cAmpDB = 8.65617025;





  

//Amp
@slider
  tmp=slider1|0;
  tmp != lslider1 ?
  (
    lslider1=tmp;

    filehandle=file_open(slider1);
    impbuf_l=impbuf_nch=impbuf_srate=0;
    filehandle > 0 ? 
    (
      file_riff(filehandle,impbuf_nch,impbuf_srate);
      impbuf_nch ?
      (
        impbuf_l=(file_avail(filehandle)/impbuf_nch)|0; 
        need_refft=1; 
        file_mem(filehandle,impbuf,impbuf_l*impbuf_nch);
      );
      file_close(filehandle);
    );
  );
  
  !stereo_mode != !slider4 ? ( need_refft=1; stereo_mode=slider4; );



  useresample != slider3 ? (useresample=slider3; need_refft=1; );
  preamp=2^(slider2/6);

  slider6=fftsize;
  slider5=filtersize;
  
  
  pdc_delay=slider27;
  pdc_bot_ch=0;
  pdc_top_ch=2;
  
  
  
  
  
  
  
  
  //eq
  lVol = exp(slider7/cAmpDB); 
  mVol = exp(slider9/cAmpDB); 
  hVol = exp(slider11/cAmpDB); 
  outVol = exp(slider13/cAmpDB); 
  
  freqLP = min(min(slider8,srate),slider10);
  xLP = exp(-2.0*$pi*freqLP/srate);
  a0LP = 1.0-xLP;
  b1LP = -xLP;
  
  freqHP = max(min(slider10,srate),slider8);
  xHP = exp(-2.0*$pi*freqHP/srate);
  a0HP = 1.0-xHP;
  b1HP = -xHP;

//Amp
@block

mode == 0? (

need_refft ? (  // prepare convolution source, here...
  useresample && srate > impbuf_srate && impbuf_srate > 1 ? 
  (
    filtersize = ((srate*impbuf_l)/impbuf_srate)|0;
    isc=impbuf_srate/srate;
  )
  : 
  (
    filtersize=impbuf_l;
    isc=1.0;
  );

  fftsize=32;

  while(
    filtersize > fftsize*0.5 ? 
    (
      fftsize += fftsize;
    ) : 0;
  );
  slider5=filtersize;
  slider6=fftsize;
  sliderchange(slider5);
  sliderchange(slider6); 
  chunksize=fftsize-filtersize-1; // size of chunk size of audio to use
  chunksize2=chunksize*2;
  
  slider27=chunksize;
  sliderchange(slider27);
  
  
  bpos=0; 
  curblock=0;
  lastblock=64*1024;
  invfsize=1/fftsize;
  i=0;
  i2=0;
  loop(min(fftsize,filtersize),
     ipos=i|0;
     ipart=(i-ipos);
     convsrc[i2]=impbuf[ipos*impbuf_nch]*(1-ipart) + impbuf[(ipos+1)*impbuf_nch]*ipart;
     convsrc[i2+1]=stereo_mode ? 0.0 : (impbuf[(ipos+1)*impbuf_nch-1]*(1-ipart) +
                   impbuf[(ipos+1)*impbuf_nch-1]*(ipart));
     i += isc;
     i2+=2;
  );
  loop(fftsize-filtersize,
     convsrc[i2]=convsrc[i2+1]=0;
     i2+=2;
  );
  fft(convsrc,fftsize);
  i=0;
  loop(fftsize*2, convsrc[i] *= invfsize; i+=1; );
  need_refft=0;
);


):(
slider27=0;
sliderchange(slider27);
);

//Eq
@sample

sl0 = (tmplLP = a0LP*spl0 - b1LP*tmplLP + cDenorm);
sl1 = (tmprLP = a0LP*spl1 - b1LP*tmprLP + cDenorm);

sh0 = spl0 - (tmplHP = a0HP*spl0 - b1HP*tmplHP + cDenorm);
sh1 = spl1 - (tmprHP = a0HP*spl1 - b1HP*tmprHP + cDenorm);

spl0 = (sl0*lVol + (spl0 - sl0 - sh0)*mVol + sh0*hVol)*outVol;
spl1 = (sl1*lVol + (spl1 - sl1 - sh1)*mVol + sh1*hVol)*outVol;

//Amp
@sample

filtersize > 0 ?
(

bpos >= chunksize ? 
(
  t=lastblock;
  lastblock=curblock;
  curblock=t;

  memset(curblock+chunksize*2,0,(fftsize-chunksize)*2);

  fft(curblock,fftsize);
  convolve_c(curblock,convsrc,fftsize);


/*
  i=0;
  loop(fftsize,
    r=curblock[i]; im=curblock[i+1];   
    cr=convsrc[i]; ci=convsrc[i+1];
    curblock[i]=r*cr-im*ci;
    curblock[i+1]=r*ci+im*cr;
    i+=2;
  );
*/

  ifft(curblock,fftsize);

  bpos=0;
);

// save sample
bp2=bpos*2;
lastblock[bp2]=spl0*preamp;
lastblock[bp2+1]=stereo_mode ? (spl1*preamp) : 0;

spl0=curblock[bp2];
spl1=curblock[bp2+1];

bpos < fftsize-chunksize ? 
(
  spl0+=lastblock[chunksize2+bp2];
  spl1+=lastblock[chunksize2+bp2+1];
);


bpos += 1;

);


//Amp+Eq
@gfx 472 195

  gfx_setfont(1,"Arial",12,'a');
  
mouse_cap > 0 ? (
  mouseon == 0 ? (
    mouseclick = 1;
    mouse_cap == 2 ? val=1.0 : val = 1.0;
    (mouse_x>=138&&mouse_x<=185&&mouse_y>=124&&mouse_y<=160) ? (mouseon=7;mouseclick=7;);
    (mouse_x>=220&&mouse_x<=260&&mouse_y>=124&&mouse_y<=160) ? (mouseon=9;mouseclick=9;);
    (mouse_x>=290&&mouse_x<=330&&mouse_y>=124&&mouse_y<=160) ? (mouseon=11;mouseclick=11;);
    (mouse_x>=370&&mouse_x<=410&&mouse_y>=124&&mouse_y<=160) ? (mouseon=13;mouseclick=13;);
    (mouse_x>=70&&mouse_x<=110&&mouse_y>=124&&mouse_y<=160) ? (mouseon=2;mouseclick=2;);
    //Low
    //Mid
    //High
    //Out
    //Pre
    );
    
  
 //pre
   mouseon == 2 ? (
     mouse_y > saveY ? slider2 = max(-40,slider2-val);
     mouse_y < saveY ? slider2 = min(10,slider2+val);
     mouse_cap == 2 ? slider2 = 0;
   );
    
  //low
  mouseon == 7 ? (
    mouse_y > saveY ? slider7 = max(-31,slider7-val);
    mouse_y < saveY ? slider7 = min(31,slider7+val);
    mouse_cap == 2 ? slider7 = 0;


  );

    //mid
    mouseon == 9 ? (
      mouse_y > saveY ? slider9 = max(-31,slider9-val);
      mouse_y < saveY ? slider9 = min(31,slider9+val);
      mouse_cap == 2 ? slider9 = 0;

  );
//high
    mouseon == 11 ? (
      mouse_y > saveY ? slider11 = max(-31,slider11-val);
      mouse_y < saveY ? slider11 = min(31,slider11+val);
      mouse_cap == 2 ? slider11 = 0;

  );
//output
    mouseon == 13 ? (
      mouse_y > saveY ? slider13 = max(-31,slider13-val);
      mouse_y < saveY ? slider13 = min(31,slider13+val);
      mouse_cap == 2 ? slider13 = 0;
  );

//repeti√ß√£o do comando @slider amp
 tmp=slider1|0;
  tmp != lslider1 ?
  (
    lslider1=tmp;

    filehandle=file_open(slider1);
    impbuf_l=impbuf_nch=impbuf_srate=0;
    filehandle > 0 ? 
    (
      file_riff(filehandle,impbuf_nch,impbuf_srate);
      impbuf_nch ?
      (
        impbuf_l=(file_avail(filehandle)/impbuf_nch)|0; 
        need_refft=1; 
        file_mem(filehandle,impbuf,impbuf_l*impbuf_nch);
      );
      file_close(filehandle);
    );
  );
  !stereo_mode != !slider4 ? ( need_refft=1; stereo_mode=slider4; );



  useresample != slider3 ? (useresample=slider3; need_refft=1; );
  preamp=2^(slider2/6);

  slider6=fftsize;
  slider5=filtersize;
  
  //repti√ß√£o do comando EQ
  lVol = exp(slider7/cAmpDB); 
  mVol = exp(slider9/cAmpDB); 
  hVol = exp(slider11/cAmpDB); 
  outVol = exp(slider13/cAmpDB); 
  
  freqLP = min(min(slider8,srate),slider10);
  xLP = exp(-2.0*$pi*freqLP/srate);
  a0LP = 1.0-xLP;
  b1LP = -xLP;
  
  freqHP = max(min(slider10,srate),slider8);
  xHP = exp(-2.0*$pi*freqHP/srate);
  a0HP = 1.0-xHP;
  b1HP = -xHP;

  saveX=mouse_x;
  saveY=mouse_y;

): (done=0;mouseon=0;);

//finaliza os comando do mouse

//inicia os comando das imagens de fundo,knobs,diplays e boto√µes
  
gfx_a=1;
gfx_x=gfx_y=0;

   rotation_x_offset = 1; // only used if rotation is set, represents offset from center of image
   rotation_y_offset = 1;
   
coordinatelist=1000000; // use memory slots 30000-30009


 //posiÁ„o da imagem de fundo
  coordinatelist[0]=0;
  coordinatelist[1]=0;
  coordinatelist[2]=472;
  coordinatelist[3]=195;
  coordinatelist[4]=0;
  coordinatelist[5]=0;
  coordinatelist[6]=472;
  coordinatelist[7]=195;
  coordinatelist[8]=0; //represents offset from center of image
  coordinatelist[9]=0; //represents offset from center of image
  gfx_blitext(0,coordinatelist,0);
  
    //posi√ß√£o da imagem do knob Pre
     coordinatelist[0]=0;
     coordinatelist[1]=-1;
     coordinatelist[2]=60;
     coordinatelist[3]=60;
     coordinatelist[4]=63;
     coordinatelist[5]=115;
     coordinatelist[6]=48;
     coordinatelist[7]=48;
     coordinatelist[8]=0; //represents offset from center of image
     coordinatelist[9]=0; //represents offset from center of image
  gfx_blitext(1,coordinatelist,slider2/3);
  
  
  //posi√ß√£o da imagem do knob low
   coordinatelist[0]=0;
   coordinatelist[1]=-1;
   coordinatelist[2]=60;
   coordinatelist[3]=60;
   coordinatelist[4]=138;
   coordinatelist[5]=115;
   coordinatelist[6]=48;
   coordinatelist[7]=48;
   coordinatelist[8]=0; //represents offset from center of image
   coordinatelist[9]=0; //represents offset from center of image
gfx_blitext(1,coordinatelist,slider7/3);

  //posi√ß√£o da imagem do knob mid
   coordinatelist[0]=0;
   coordinatelist[1]=-1;
   coordinatelist[2]=60;
   coordinatelist[3]=60;
   coordinatelist[4]=215;
   coordinatelist[5]=115;
   coordinatelist[6]=48;
   coordinatelist[7]=48;
   coordinatelist[8]=0; //represents offset from center of image
   coordinatelist[9]=0; //represents offset from center of image
gfx_blitext(1,coordinatelist,slider9/3);

  //posi√ß√£o da imagem do knob high
   coordinatelist[0]=0;
   coordinatelist[1]=-1;
   coordinatelist[2]=60;
   coordinatelist[3]=60;
   coordinatelist[4]=289;
   coordinatelist[5]=115;
   coordinatelist[6]=48;
   coordinatelist[7]=48;
   coordinatelist[8]=0; //represents offset from center of image
   coordinatelist[9]=0; //represents offset from center of image
gfx_blitext(1,coordinatelist,slider11/3);

  //posi√ß√£o da imagem do knob output
   coordinatelist[0]=0;
   coordinatelist[1]=-1;
   coordinatelist[2]=60;
   coordinatelist[3]=60;
   coordinatelist[4]=367;
   coordinatelist[5]=115;
   coordinatelist[6]=48;
   coordinatelist[7]=48;
   coordinatelist[8]=0; //represents offset from center of image
   coordinatelist[9]=0; //represents offset from center of image
gfx_blitext(1,coordinatelist,slider13/3);

  gfx_r=0.7;gfx_g=1.0;gfx_b=0.8;
  gfx_r=1.0;

//display Pre amp value
  gfx_x=77;gfx_y=162;
  gfx_drawnumber(slider2,1);

  gfx_r=1.0;

//display low valor
  gfx_x=153;
  gfx_drawnumber(slider7,1);

//display mid valor
  gfx_x=230;
  gfx_drawnumber(slider9,1);

//display High valor
  gfx_x=304;
  gfx_drawnumber(slider11,1);

//display Output valor
  gfx_x=380;
  gfx_drawnumber(slider13,1);

  gfx_r=1.0;
  

 gfx_g=1.0;gfx_b=0.8;
    gfx_r=1;
    gfx_a=1;
  
  //display FFt e filter Size
    gfx_x=90;gfx_y=16;
    gfx_drawnumber(slider5,1);
    gfx_y=29;gfx_x=89;
    gfx_drawnumber(slider6,1);
    gfx_y=41;gfx_x=89;
    gfx_drawnumber(slider27,1);
 gfx_x = 44; gfx_y = 16;
 gfx_drawstr("Filter Size:");
 gfx_y = 28;; gfx_x = 45;
 gfx_drawstr("FFT  Size:");
 gfx_y = 40;; gfx_x = 38;
 gfx_drawstr("PDF Delay:");
 
 
