// Copyright 2006, Thomas Scott Stillwell
// Portions Copyright (C) 2006 Cockos Incorporated
// All rights reserved.
//
//Redistribution and use in source and binary forms, with or without modification, are permitted 
//provided that the following conditions are met:
//
//Redistributions of source code must retain the above copyright notice, this list of conditions 
//and the following disclaimer. 
//
//Redistributions in binary form must reproduce the above copyright notice, this list of conditions 
//and the following disclaimer in the documentation and/or other materials provided with the distribution. 
//
//The name of Thomas Scott Stillwell may not be used to endorse or 
//promote products derived from this software without specific prior written permission. 
//
//THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR 
//IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND 
//FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS 
//BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
//(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
//PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
//STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF 
//THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

desc: Ozzifier Chorus
desc: Ozzifier Chorus [Stillwell]
//tags: modulation pitch delay stereo
//author: Stillwell
//Código  faz parte de Stillwell e JS PLugins Cockos Inc.
//tags: somenta skins e o código GFx foi obra de Gil Fernandes
filename:0,b1.png
filename:1,f.png
filename:2,d.png


slider1:2<0,6,1>-Number of voices
slider2:10<0,120,0.1>-time spread (ms)
slider3:20<0,120,1>-pitch spread (cent)
slider4:-6<-120,6,1>wet mix (dB)
slider5:-6<-120,6,1>dry mix (dB)
slider6:100<0,100>-pan spread%
 
@init
  gfx_clear=-1;
  gfx_refresh=1;
  lastscreensz=-1; // last size
  bufsize = srate|0;
  xfade=(srate*0.10)|0; // 100ms xfade
  bufloc0 = 10000;
  bufloc1 = bufloc0+bufsize+1000;
  voiceptr0loc = bufloc1+bufsize+1000;
  voicerateloc = voiceptr-loc+1000;
  cospanloc = voicerateloc+1000;
  sinpanloc = cospanloc+1000;

  buffer0 = bufloc0;
  buffer1 = bufloc1;
  voiceptr0 = voiceptr0loc;
  voicerate = voicerateloc;
  cospan = cospanloc;
  sinpan = sinpanloc;

  bufdiff=bufloc1-bufloc0;
//slider
  numvoices = slider1;

  delaytime = (slider2*0.001*srate)|0;

  pitchspread = slider3;

  totalpitch = pitchspread * numvoices;

  bufsize = (delaytime)|0; 
  xfade=(bufsize*0.05)|0;

  drymix = 2 ^ (slider5/6); 
  wetmix = 2 ^ (slider4/6);

  panwidth = slider6/100;
  lpan = 0.5 - (panwidth/2);
  panincr = panwidth/max(1,numvoices-1);

  i = 1;

  loop(numvoices,
    voicerate[i] = 2 ^ (-((totalpitch / 2) - (pitchspread * i)) / 1200);
    voiceptr0[i] = bufloc0 + bufsize - (i/numvoices) * delaytime;
    (voiceptr0[i] < bufloc0) ? voiceptr0[i] += bufsize;
    cospan[i] = cos((lpan + (i - 1) * panincr) * $pi / 2);
    sinpan[i] = sin((lpan + (i - 1) * panincr) * $pi / 2);
    i += 1;
  );


@sample
 wet0 = wet1 = 0;
 i = 1;
 loop(numvoices,
   v0=voiceptr0[i]; iv0=0|(v0); frac0=v0-iv0;
   iv02 = iv0 >= (bufloc0+bufsize-1) ? iv0-bufsize+1 : iv0+1;   
 
   ren0=(iv0[0]*(1-frac0)+iv02[0]*frac0);
   ren1=(iv0[bufdiff]*(1-frac0)+iv02[bufdiff]*frac0);
   vr=voicerate[i];
 
   vr >= 1.0 ?
   (
     tv=v0;
     tv>buffer0?tv-=bufsize;
     (tv >= buffer0-xfade && tv < buffer0) ? (
        // xfade
       frac=(buffer0-tv)/xfade;
       tmp=v0+xfade;
       tmp>=bufloc0+bufsize?tmp-=bufsize;
       tmp2=tmp>=bufloc0+bufsize-1?bufloc0:tmp+1;
       ren0 = ren0*frac + (1-frac)*( tmp[0]*(1-frac0)+tmp2[0]*frac0 );
       ren1 = ren1*frac + (1-frac)*( tmp[bufdiff]*(1-frac0)+tmp2[bufdiff]*frac0 );
       tv+vr > buffer0+1 ? v0+=xfade;
     );
   ) : ( // read pointer moving slower than write pointer
     tv=v0;
     tv<buffer0?tv+=bufsize;
     (tv >= buffer0 && tv < buffer0+xfade) ? (
        // xfade
       frac=(tv-buffer0)/xfade;
       tmp=v0+xfade;
       tmp>=bufloc0+bufsize?tmp-=bufsize;
       tmp2=tmp>=bufloc0+bufsize-1?bufloc0:tmp+1;
       ren0 = ren0*frac + (1-frac)*( tmp[0]*(1-frac0)+tmp2[0]*frac0 );
       ren1 = ren1*frac + (1-frac)*( tmp[bufdiff]*(1-frac0)+tmp2[bufdiff]*frac0 );
       tv+vr < buffer0+1 ? v0+=xfade;
     );
   );
   wet0 += cospan[i] * ren0;
   wet1 += sinpan[i] * ren1;
   
   ((v0+=vr) >= (bufloc0+bufsize)) ? v0 -= bufsize;
   voiceptr0[i]=v0;
   i += 1;
 );
 
 buffer0[0] = spl0; // write after reading it to avoid clicks
 buffer0[bufdiff] = spl1;
 
 spl0 = wet0 * wetmix + spl0 * drymix;
 spl1 = wet1 * wetmix + spl1 * drymix;
 
 ((buffer0+=1) >= (bufloc0 + bufsize)) ? buffer0 -= bufsize;

@gfx 500 330



(mouse_cap&1) ? (
  need_redraw=1;
  mouse_x > 335 && mouse_x < 355 ? (
    mousedown=1;
    val=slider1;
    mouse_y > 85 && mouse_y < 110 ? (val=0);
    mouse_y > 116 && mouse_y < 138 ? (val=1);
    mouse_y > 142 && mouse_y < 163 ? (val=2);
    mouse_y > 170 && mouse_y < 190 ? (val=3);
    mouse_y > 198 && mouse_y < 218 ? (val=4);
    mouse_y > 223 && mouse_y < 244 ? (val=5);
    mouse_y > 250 && mouse_y < 270 ? (val=6);
  );
  mouse_cap == 5 ? (val /= 4 );  
)
:
(
  mousedown = 0;
     need_redraw=0;
);

      

  mousedown == 1 ? (slider1 = val);      

mouse_cap > 0 ? (
  mouseon == 0 ? (
    mouseclick = 0;
      //Time
     (mouse_x>=100&&mouse_x<=225&&mouse_y>=75&&mouse_y<=95) ? (mouseon=2;mouseclick=2;);
     //Pitch
      (mouse_x>=100&&mouse_x<=225&&mouse_y>=124&&mouse_y<=140) ? (mouseon=3;mouseclick=3;);
     //Pan
       (mouse_x>=100&&mouse_x<=225&&mouse_y>=172&&mouse_y<=193) ? (mouseon=6;mouseclick=6;);
     //Wet
        (mouse_x>=100&&mouse_x<=225&&mouse_y>=220&&mouse_y<=240) ? (mouseon=4;mouseclick=4;);
     //Dry
         (mouse_x>=100&&mouse_x<=225&&mouse_y>=260&&mouse_y<=285) ? (mouseon=5;mouseclick=5;);
     mouse_cap == 5 ? val*=0.1;

  );

  mouseon == 2 ? (
    mouse_cap == 1 ? slider2 = max(1,min((mouse_x-100)+1,120)):
    mouse_cap == 2 ? slider2 = 10;
  );
  
  mouseon == 3 ? (
    mouse_cap == 1 ? slider3 = max(1,min((mouse_x-100)+1,100)):
    mouse_cap == 2 ? slider3 = 20;
  );
     
     mouseon == 6 ? (
       mouse_cap == 1 ? slider6 = max(1,min((mouse_x-100)+1,120)):
       mouse_cap == 2 ? slider6 = 100;
     );
     
     mouseon == 4 ? (
       mouse_cap == 1 ? slider4 = min(6,max((mouse_x-210)+1,-100)):
       mouse_cap == 2 ? slider4 = -6;
     );
     
     mouseon == 5 ? (
        mouse_cap == 1 ? slider5 = min(6,max((mouse_x-210)+1,-100)):
        mouse_cap == 2 ? slider5 = -6;
      
      );
  numvoices = slider1;

  delaytime = (slider2*0.001*srate)|0;

  pitchspread = slider3;

  totalpitch = pitchspread * numvoices;

  bufsize = (delaytime)|0; 
  xfade=(bufsize*0.05)|0;

  drymix = 2 ^ (slider5/6); 
  wetmix = 2 ^ (slider4/6);

  panwidth = slider6/100;
  lpan = 0.5 - (panwidth/2);
  panincr = panwidth/max(1,numvoices-1);

  i = 1;

  loop(numvoices,
    voicerate[i] = 2 ^ (-((totalpitch / 2) - (pitchspread * i)) / 1200);
    voiceptr0[i] = bufloc0 + bufsize - (i/numvoices) * delaytime;
    (voiceptr0[i] < bufloc0) ? voiceptr0[i] += bufsize;
    cospan[i] = cos((lpan + (i - 1) * panincr) * $pi / 2);
    sinpan[i] = sin((lpan + (i - 1) * panincr) * $pi / 2);
    i += 1;
  );

         
      
    
  saveX=mouse_x;
  saveX=mouse_X;

):mouseon=0;

//Acima é comandos da modificado por Gil Fernandes
//Abaixo sobre o gráficos modificado por Gil fernandes

coordinatelist=1000000;
  
  rotation_x_offset = 0; // only used if rotation is set, represents offset from center of image
  rotation_y_offset = 0;
  coordinatelist=30000; // use memory slots 30000-30009
     // Imagem de Fundo 
      coordinatelist[0]=0;
      coordinatelist[1]=0;
      coordinatelist[2]=500;
      coordinatelist[3]=330;
      coordinatelist[4]=0;
      coordinatelist[5]=0;
      coordinatelist[6]=500;
      coordinatelist[7]=330;
      coordinatelist[8]=rotation_x_offset; // only used if rotation is set, represents offset from center of image
      coordinatelist[9]=rotation_y_offset; // only used if rotation is set, represents offset from center of image
    
      gfx_blitext(0,coordinatelist,0);
      
      coordinatelist[0]=0;
        coordinatelist[1]=0;
        coordinatelist[2]=20;
        coordinatelist[3]=20;
      
        coordinatelist[4]=338;
        coordinatelist[6]=20;
        coordinatelist[7]=20;
        coordinatelist[8]=rotation_x_offset; // only used if rotation is set, represents offset from center of image
        coordinatelist[9]=rotation_y_offset;
        
        coordinatelist[5]=slider1*27+91;
      
         gfx_blitext(2,coordinatelist,0);
      
      
      
  

//este parametro é do fader
  coordinatelist[0]=0;
  coordinatelist[1]=0;
  coordinatelist[2]=128;
  coordinatelist[3]=128;
  coordinatelist[5]=74;
  coordinatelist[6]=30;
  coordinatelist[7]=30;
  coordinatelist[8]=rotation_x_offset; // only used if rotation is set, represents offset from center of image
  coordinatelist[9]=rotation_y_offset; // only used if rotation is set, represents offset from center of image
  
  


//Barra Cor Principal

 gfx_r=0.4;gfx_g=0.1;gfx_b=0;

//Barra Time
   gfx_a=1;
     gfx_x=100;gfx_y=82;
       gfx_rectto(103+slider2*1.03,95);
       
       //Parametro do fader time
       coordinatelist[4]=81+slider2*1.03;
       gfx_blitext(1,coordinatelist,0);
      
  
//barra pitch
         gfx_a=1;
          gfx_x=100;gfx_y=129;
           gfx_rectto(103+slider3*1.22,142);
           //parametro do fader pitch
           coordinatelist[5]=120;
           coordinatelist[4]=83+slider3*1.22;
           gfx_blitext(1,coordinatelist,0);
           
  

//barra pan
               gfx_a=1;
                gfx_x=100;gfx_y=182;
                   gfx_rectto(103+slider6*1.0094,195);
                   
            //fader parametro pan
                   coordinatelist[5]=175;
                   coordinatelist[4]=82+slider6*1.0094;
                   gfx_blitext(1,coordinatelist,0);
                   

//barra WET
                  gfx_a=1;
                   gfx_x=103;gfx_y=239;
                    gfx_rectto(219+slider4*1.14,228);
                    
                    //parametro do fader WET
                    coordinatelist[5]=220;
                    coordinatelist[4]=197+slider4*1.14;
                    gfx_blitext(1,coordinatelist,0);

//barra dry
                      gfx_a=1;
                       gfx_x=103;gfx_y=277;
                        gfx_rectto(219+slider5*1.14,266);
                        
                        //parametro do fader WET
                        coordinatelist[5]=258;
                        coordinatelist[4]=197+slider5*1.14;
                        gfx_blitext(1,coordinatelist,0);
                        
                        
                        
                        gfx_r=1;gfx_g=0.5;gfx_b=0.1;
                        
                                   //Display Time
                                gfx_a=1.0;
                                 gfx_x=251;gfx_y=84;
                                  gfx_drawnumber(slider2,0);
                                
                                        //display pitch
                                         gfx_a=1;
                                          gfx_x=251;gfx_y=131;
                                            gfx_drawnumber(slider3,0);
                        
                        //display pan
                             gfx_a=1;
                              gfx_x=251;gfx_y=185;
                               gfx_drawnumber(slider6,0);
                               
                               
                               //display WET
                                        gfx_a=1;
                                         gfx_x=251;gfx_y=229;
                                          gfx_drawnumber(slider4,0);
                        
            //display DRY
                         gfx_a=1;
                          gfx_x=251;gfx_y=267;
                            gfx_drawnumber(slider5,0);
                            
                          
                         
  gfx_refresh=0;



 gfx_r=0 ;gfx_g=0;gfx_b=0;
    gfx_a = 1;
    gfx_x = 20;
    gfx_y = 316;
    gfx_drawchar($'S');
    gfx_drawchar($'T');
    gfx_drawchar($'I');
    gfx_drawchar($'L');
    gfx_drawchar($'L');
    gfx_drawchar($'W'); 
    gfx_drawchar($'E');
    gfx_drawchar($'L');
    gfx_drawchar($'L');
    
    gfx_r=0 ;gfx_g=0;gfx_b=0;
       gfx_a = 1;
       gfx_x = 335;
       gfx_drawchar($'G');
       gfx_drawchar($'i');
       gfx_drawchar($'l');
       gfx_drawchar($' ');
       gfx_drawchar($'F');
       gfx_drawchar($'e'); 
       gfx_drawchar($'r');
       gfx_drawchar($'n');
       gfx_drawchar($'a');
       gfx_drawchar($'n');
       gfx_drawchar($'d');
       gfx_drawchar($'e');
       gfx_drawchar($'s');
       gfx_drawchar($' ');
       gfx_drawchar($'V');
       gfx_drawchar($'1');
       gfx_drawchar($'.');
       gfx_drawchar($'5');



